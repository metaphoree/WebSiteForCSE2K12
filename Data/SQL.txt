1.SELECT * FROM Customers;
2.SELECT - extracts data from a database
 UPDATE - updates data in a database
 DELETE - deletes data from a database

INSERT INTO - inserts new data into a database

CREATE DATABASE - creates a new database

ALTER DATABASE - modifies a database

CREATE TABLE - creates a new table

ALTER TABLE - modifies a table

DROP TABLE - deletes a table

CREATE INDEX - creates an index (search key)

DROP INDEX - deletes an index

3.SELECT column_name,column_name
FROM table_name;

4.SELECT * FROM table_name;

5.SELECT DISTINCT column_name,column_name
FROM table_name;

6.SELECT column_name,column_name
FROM table_name
WHERE column_name operator value

USING BETWEEN,LIKE,IN;

7.SELECT * FROM Customers
WHERE Country='Germany'
AND City='Berlin';




OR


SELECT * FROM Customers
WHERE City='Berlin'
OR City='München';


OR


SELECT * FROM Customers
WHERE Country='Germany'
AND (City='Berlin' OR City='München');




8.SELECT column_name,column_name
FROM table_name
ORDER BY column_name,column_name ASC|DESC;


9.INSERT INTO table_name
VALUES (value1,value2,value3,...);


10.INSERT INTO table_name (column1,column2,column3,...)
VALUES (value1,value2,value3,...);

11.UPDATE table_name
SET column1=value1,column2=value2,...
WHERE some_column=some_value;

12.UPDATE Customers
SET ContactName='Alfred Schmidt', City='Hamburg';

all contact name and  city  will be same;

13.DELETE FROM table_name
WHERE some_column=some_value;


14.DELETE FROM Customers

WHERE CustomerName='Alfreds Futterkiste' AND ContactName='Maria Anders';

15.DELETE FROM table_name;

or

DELETE * FROM table_name;

deletes all data;



16.SELECT UserId, Name, Password FROM Users WHERE UserId = 105 or 1=1

17.sql = "SELECT * FROM Users WHERE Name ='  "  + uName + " ' AND Pass =' " + uPass + " ' "


18.SELECT TOP number|percent column_name(s)
FROM table_name;

19.SELECT column_name(s)
FROM table_name
WHERE column_name LIKE pattern;

20.SELECT * FROM Customers
WHERE City LIKE '%s';


21.SELECT * FROM Customers
WHERE Country NOT LIKE '%land%';
..............
22.SELECT * FROM Customers
WHERE City LIKE 'ber%';



23.SELECT * FROM Customers
WHERE City LIKE '%es%';


24.SELECT * FROM Customers
WHERE City LIKE '_erlin';



25.SELECT * FROM Customers
WHERE City LIKE 'L_n_on';



26.SELECT * FROM Customers
WHERE City LIKE '[bsp]%';


27.SELECT * FROM Customers
WHERE City LIKE '[a-c]%';



28.SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';


29.SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1,value2,...);


30.SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;


31.SELECT * FROM Products
WHERE (Price BETWEEN 10 AND 20)
AND NOT CategoryID IN (1,2,3);


32.SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'C' AND 'M';


33.SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;


34.SELECT column_name  AS  alias_name
FROM table_name;


35.SELECT column_name(s)
FROM   table_name  AS  alias_name;


36.SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers;



37.SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name=table2.column_name;


38.SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers
ON Orders.CustomerID=Customers.CustomerID;


39.The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are rows in the "Customers" table that do not have matches in "Orders", these customers will NOT be listed.


40. SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name=table2.column_name;

41.SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name=table2.column_name;

42.SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name=table2.column_name


43.SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;

44.SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;


45.SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

46.SELECT *
INTO newtable [IN externaldb]
FROM table1;

Or we can copy only the columns we want into the new table:

47.SELECT column_name(s)
INTO newtable [IN externaldb]
FROM table1;


48.Create a backup copy of Customers:

SELECT *
INTO CustomersBackup2013
FROM Customers;

49.Use the IN clause to copy the table into another database:

SELECT *
INTO CustomersBackup2013 IN 'Backup.mdb'
FROM Customers;

50.Copy only a few columns into the new table:

SELECT CustomerName, ContactName
INTO CustomersBackup2013
FROM Customers;

51.Copy only the German customers into the new table:

SELECT *
INTO CustomersBackup2013
FROM Customers
WHERE Country='Germany';

52.Copy data from more than one table into the new table:

SELECT Customers.CustomerName, Orders.OrderID
INTO CustomersOrderBackup2013
FROM Customers
LEFT JOIN Orders
ON Customers.CustomerID=Orders.CustomerID;

53.Tip: The SELECT INTO statement can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data:

SELECT *
INTO newtable
FROM table1
WHERE 1=0;

54.We can copy all columns from one table to another, existing table:

INSERT INTO table2
SELECT * FROM table1;

55.Or we can copy only the columns we want to into another, existing table:

INSERT INTO table2
(column_name(s))
SELECT column_name(s)
FROM table1;


56.The CREATE DATABASE statement is used to create a database.

SQL CREATE DATABASE Syntax

CREATE DATABASE dbname;

SQL CREATE DATABASE Example
The following SQL statement creates a database called "my_db":

CREATE DATABASE my_db;


57.SQL CREATE TABLE Syntax

CREATE TABLE table_name
(
column_name1 data_type(size),
column_name2 data_type(size),
column_name3 data_type(size),
....
);
The column_name parameters specify the names of the columns of the table.

The data_type parameter specifies what type of data the column can hold (e.g. varchar, integer, decimal, date, etc.).

The size parameter specifies the maximum length of the column of the table.

Tip: For an overview of the data types available in MS Access, MySQL, and SQL Server, go to our complete Data Types Reference.

SQL CREATE TABLE Example
Now we want to create a table called "Persons" that contains five columns: PersonID, LastName, FirstName, Address, and City.

We use the following CREATE TABLE statement:

Example

CREATE TABLE Persons
(
PersonID int,
LastName varchar(255),
FirstName varchar(255),
Address varchar(255),
City varchar(255)
);
58.CREATE TABLE table_name
(
column_name1 data_type(size) constraint_name,
column_name2 data_type(size) constraint_name,
column_name3 data_type(size) constraint_name,
....
);
 In SQL, we have the following constraints:

1.NOT NULL -> Indicates that a column cannot store NULL value


2.UNIQUE -> Ensures that each row for a column must have a unique value

3.PRIMARY KEY -> A combination of a NOT NULL and UNIQUE. Ensures that a column (or combination of two or more columns) have an unique identity which helps to find a particular record in a table more easily and quickly

4.FOREIGN KEY -> Ensure the referential integrity of the data in one table to match values in another table

5.CHECK --> Ensures that the value in a column meets a specific condition

6.DEFAULT --> Specifies a default value when specified none for this column;



NOT NULL,UNIQUE,PRIMARY KEY,FOREIGN KEY,CHECK,DEFAULT



using System.Data.SqlClient;


SqlConnection con=new SqlConnection("");
con.Open();
SqlCommand cmd=new Sql command("");


cmd.ExecuteNonQuery();
con.close();


http://asp.net-informations.com/












